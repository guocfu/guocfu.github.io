<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Lancelot</title>
        <link>http://localhost:10094/categories/git/</link>
        <description>Recent content in Git on Lancelot</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Lancelot</copyright>
        <lastBuildDate>Mon, 02 Jun 2025 20:17:20 +0800</lastBuildDate><atom:link href="http://localhost:10094/categories/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Learn Git Branching</title>
        <link>http://localhost:10094/p/learn-git-branching/</link>
        <pubDate>Mon, 02 Jun 2025 20:17:20 +0800</pubDate>
        
        <guid>http://localhost:10094/p/learn-git-branching/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;学习网站: &lt;a class=&#34;link&#34; href=&#34;https://learngitbranching.js.org/?locale=zh_CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn Git Branching&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考笔记: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/column/c_1561431080028381184&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;git学习笔记 - 知乎&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;主要&#34;&gt;主要
&lt;/h1&gt;&lt;h2 id=&#34;基础篇&#34;&gt;基础篇
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;循序渐进地介绍Git主要命令：git commit; git branch; git merge; git rebase&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;1git-commit&#34;&gt;1.git commit
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;strong&gt;修改了代码库, 把这些修改保存成了一个提交记录&lt;/strong&gt;C2。C2的父节点是C1，父节点是当前提交中变更的基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目:提交两次修改&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;images/v2-6ba4473b3d8544f7c0798d022271cf0c_720w.jpg&#34; alt=&#34;img&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit //生成C2节点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit //生成C3节点
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2git-branch&#34;&gt;2.git branch
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git branch &amp;lt;newImage&amp;gt;&lt;/code&gt;&lt;strong&gt;新建一个名为newImage的分支指向当前提交记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git的分支也非常轻量。它们只是简单地指向某个提交记录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout &amp;lt;newImage&amp;gt;&lt;/code&gt;&lt;strong&gt;切换到分支newImage上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch name&amp;gt;&lt;/code&gt;&lt;strong&gt;创建一个新分支并切换过去&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**题目：**创建一个名为bugFix的新分支，然后切换过去。（有更简洁的方式：想创建一个新的分支同时切换到新创建的分支的话，可以通过git checkout -b &amp;lt;your branch name&amp;gt;来实现）&lt;/p&gt;
&lt;img src=&#34;images/v2-6ba4473b3d8544f7c0798d022271cf0c_720w-17488485245532.jpg&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch bugFix   //生成分支bugFix
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout bugFix //切换到bugFix分支上
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// git checkout -b bugFix
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3git-merge&#34;&gt;3.git merge
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git merge &amp;lt;bugFix&amp;gt;&lt;/code&gt;(当前分支为main)把bugFix&lt;strong&gt;合并到当前分支&lt;/strong&gt;(main)中, 并生成新的提交记录, 该提交记录以上面两个提交记录为父节点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;images/v2-b04e3e9d3381ed5691c57873babb60fd_720w.jpg&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b bugFix //创建并切换分支bugFix
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit             //在bugFix分支增加C2节点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout main      //切换到main上
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit             //在main分支增加C3节点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge bugFix       //将bugFix分支的内容合并到main上
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;4git-rebase&#34;&gt;4.git rebase
&lt;/h3&gt;&lt;p&gt;第二种合并方法：&lt;code&gt;git rebase &lt;/code&gt;。rebase实际上就是取出一系列的提交记录，“复制”题目，然后再另外一个地方逐个的放下去。&lt;/p&gt;
&lt;p&gt;rebase的优势就是可以创造更线性的提交历史，如果只允许使用rebase的话，代码库的提交历史将会变得异常清晰。&lt;/p&gt;
&lt;p&gt;(当前分支为bugFix)输入&lt;code&gt;git rebase &amp;lt;main&amp;gt;&lt;/code&gt;&lt;strong&gt;将bugFix记录的副本复制到main下面&lt;/strong&gt;, 原本的提交记录仍存在&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout main; git rebase bugFix&lt;/code&gt;将main分支rebase到bugFix上(&lt;strong&gt;main和bugFix此时指向同一个提交记录, 即原bugFIx的副本&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目:&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;images/v2-d7a55ff6e2e7dd982ca494a72ec8fc59_720w.jpg&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b bugFix //创建并切换分支bugFix
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit             //在bugFix上增加C2节点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout main      //切换到main上
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit             //在main上增加C3节点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout bugFix    //切换到bugFix分支上
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase main        //将bugFix分支上的内容合并到main上
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;高级篇&#34;&gt;高级篇
&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;git checkout&lt;/code&gt;移动HEAD指针&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git branch -f&lt;/code&gt; 来移动分支指针&lt;/li&gt;
&lt;li&gt;相对引用^和~&amp;lt;num&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD~&lt;/code&gt;和&lt;code&gt;git revert HEAD&lt;/code&gt;撤销当前提交&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;1head指针和分支指针&#34;&gt;1.HEAD指针和分支指针
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/HandsomeHong/article/details/112759075&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;git基础教程(12) 理解HEAD指针和分支指针_git head分支-CSDN博客&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;head指针&#34;&gt;HEAD指针
&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;git checkout&lt;/code&gt; 来&lt;strong&gt;移动HEAD指针&lt;/strong&gt;，移动的对象可以是&lt;strong&gt;分支指针也可以是快照。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HEAD是一个对当前检出记录的符号引用——也就是指向正在其基础上工作的提交记录。&lt;strong&gt;HEAD指针可以指向快照也可以指向branch&lt;/strong&gt;。当指向branch时提交后会和branch指针一起向后移动，当不指向branch提交时则会在一个detached状态。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HEAD指针默认指向当前的分支指针，用星号表示，如master*&lt;/li&gt;
&lt;li&gt;移动HEAD指针，&lt;code&gt;git checkout C1&lt;/code&gt;
这个时候HEAD指针指向的是快照，这个时候指针的状态称之为&lt;strong&gt;游离状态，detached&lt;/strong&gt;，可以理解为没有和任何分支绑定。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;游离的HEAD就是让其指向了某个具体的提交记录而不是分支名。在命令执行之前的状态如下所示：&lt;/p&gt;
&lt;p&gt;HEAD -&amp;gt; main -&amp;gt; C1（HEAD指向main，main指向C1）&lt;/p&gt;
&lt;h4 id=&#34;分支指针&#34;&gt;分支指针
&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;git branch -f&lt;/code&gt; 来&lt;strong&gt;移动分支指针&lt;/strong&gt;，&lt;strong&gt;移动的对象(方向)只能是快照。当且仅当HEAD指针指向分支指针的时候，提交才会有效&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -f main HEAD~3 //这条命令会将main分支强制指向HEAD的第3级父提交。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2相对引用和&#34;&gt;2.相对引用^和~
&lt;/h3&gt;&lt;p&gt;使用相对引用的话，可以从一个易于记忆的地方（比如bugFix分支或者HEAD）开始计算。&lt;/p&gt;
&lt;p&gt;两种简单的用法：&lt;/p&gt;
&lt;p&gt;1.使用&lt;code&gt;^&lt;/code&gt;向上移动1个提交记录&lt;/p&gt;
&lt;p&gt;2.使用&lt;code&gt;~&amp;lt;num&amp;gt;&lt;/code&gt;向上移动多个提交记录，如~3&lt;/p&gt;
&lt;p&gt;**题目: **要完成此关，移动HEAD，main和bugFix到目标所示的位置。&lt;/p&gt;
&lt;img src=&#34;images/v2-a72b7a42eb8db8579bcac0c0319e8748_720w.jpg&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 三条命令的顺序不重要
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -f main C6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout HEAD^   // 或者git checkout C1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -f bugFix HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3版本回退resetrevert&#34;&gt;3.版本回退(reset&amp;amp;revert)
&lt;/h3&gt;&lt;p&gt;在git里撤销变更的方法很多，和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部门（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。&lt;/p&gt;
&lt;p&gt;主要有两种方法用来撤销变更——一是&lt;code&gt;git reset&lt;/code&gt;，还有就是&lt;code&gt;git revert&lt;/code&gt;，接下来咱们逐个进行讲解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git Reset&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;git reset通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。&lt;strong&gt;git reset向上移动分支&lt;/strong&gt;，原来指向的提交记录就跟从来没有提交过一样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset HEAD~  // 撤销当前提交&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;即向上移动分支&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Git把main分支移回到C1；现在我们的本地代码库根本就不知道有C2这个提交了。（在reset后，C2所做的变更还在，但是处于未加入暂存区状态。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git Revert&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;git reset对远程分支无效, git revert在要撤销的记录C2后多出一个新提交记录C2&amp;rsquo;, 该记录表示的就是撤销上一个提交记录C2, 也就是说 C2&amp;rsquo; 的状态与 C1 是相同的. 如果C2后边还有C3,C4等等提交，C3,C4的修改不会动，仅仅是撤销C2的这次提交修改的内容！并在C4后边生成新的提交（撤销C2的修改）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git revert HEAD // 撤销当前提交
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要完成此关，分别撤销 local 分支和 pushed 分支上的最近一次提交。共需要撤销两个提交（每个分支一个）。
记住 pushed 是远程分支，local 是本地分支。&lt;/p&gt;
&lt;img src=&#34;images/v2-35986692e93b6f469210ecc07b0cdbaf_720w.jpg&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset HEAD^     //撤销本地分支用reset 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout pushed  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git revert HEAD     //撤销远程分支用revert
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Git 入门</title>
        <link>http://localhost:10094/p/git-%E5%85%A5%E9%97%A8/</link>
        <pubDate>Thu, 08 May 2025 18:18:59 +0800</pubDate>
        
        <guid>http://localhost:10094/p/git-%E5%85%A5%E9%97%A8/</guid>
        <description>&lt;img src="http://localhost:10094/p/git-%E5%85%A5%E9%97%A8/images/test.jpg" alt="Featured image of post Git 入门" /&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Zz4y1C7vg?vd_source=34f258c10dffd1ad2b0976714550c032&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【2021年Git全集教程】大牛4小时带你精通Git玩转GitHub（最新版）_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/git/git-remote-repo.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git 远程仓库(Github) | 菜鸟教程&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Ctrl+Alt+G&lt;/code&gt; 打开 git bash&lt;/p&gt;
&lt;h2 id=&#34;初始化本地仓库&#34;&gt;初始化本地仓库
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;本地创建一个文件夹 &lt;code&gt;GitResp&lt;/code&gt; 保存仓库（非必须）&lt;/li&gt;
&lt;li&gt;Git Bash Here  (Ctrl + 滑轮 调整字体大小 / Options 设置)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git 命令与 linux 相同&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;clear&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 清屏&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;设置签名：
设置用户名和邮箱：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;***&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;***&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本次仓库初始化
&lt;code&gt;git init&lt;/code&gt; 生成 &lt;code&gt;.git&lt;/code&gt; 隐藏文件夹&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.git 文件夹下文件不要轻易修改&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;常用命令
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在工作区创建一个文件&lt;/li&gt;
&lt;li&gt;将文件提交到暂存区 &lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将暂存区提交到本地库 &lt;code&gt;git commit -m &amp;quot;comment&amp;quot; &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt; 查看缓存区状态 （修改本地文件需要用 add, commit 命令更新本地库）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不放在工作区的文件，git 不进行管理&lt;/li&gt;
&lt;li&gt;即使放在工作区的文件，&lt;strong&gt;必须通过 add，commit 命令操作将内容提交到本地库 git 才能管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;fg-命令&#34;&gt;fg 命令
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Ctrl+Z挂起作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# jobs查看挂起的作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# fg 将后台的作业切换到前台&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;jobs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;+  Stopped                 vim Git学习笔记.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;fg&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vim Git学习笔记.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;+  Stopped                 vim Git学习笔记.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Shinelon@DESKTOP-69E8U3H MINGW64 /e/坚果云/Notes/Git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;fg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vim Git学习笔记.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;log-命令&#34;&gt;log 命令
&lt;/h3&gt;&lt;p&gt;方法 1：&lt;code&gt;git log&lt;/code&gt; 日志 (q 退出)
太多时分页(b 上一页)&lt;/p&gt;
&lt;p&gt;方法 2：&lt;code&gt;git log --pretty=oneline&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法 3： &lt;code&gt;git log --online&lt;/code&gt;  (更简洁)&lt;/p&gt;
&lt;p&gt;方法 4：&lt;code&gt;git reflog&lt;/code&gt;
多了信息：HEAD@{number} &amp;ndash; 指针回到这个历史版本需要多少步&lt;/p&gt;
&lt;h3 id=&#34;reset-命令&#34;&gt;reset 命令
&lt;/h3&gt;&lt;p&gt;前进或后退历史版本&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --hard &amp;lt;hash&amp;gt;&lt;/code&gt; (hash 在 HEAD@前)&lt;/p&gt;
&lt;p&gt;本地库指针移动的同时，&lt;strong&gt;重置暂存区和工作区&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --mixed &amp;lt;hash&amp;gt;&lt;/code&gt;
本地库指针移动的同时，&lt;strong&gt;重置暂存区，工作区不变&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --soft &amp;lt;hash&amp;gt;&lt;/code&gt;
本地库指针移动的，&lt;strong&gt;暂存区和工作区都不动&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常用 &lt;code&gt;hard&lt;/code&gt; 参数&lt;/p&gt;
&lt;h3 id=&#34;删除文件&#34;&gt;删除文件
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;删除工作区中的 test2.txt  &lt;code&gt;rm test2.txt&lt;/code&gt;，或者选中文件手动删除&lt;/li&gt;
&lt;li&gt;将删除操作同步到暂存区 &lt;code&gt;git rm test2.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将删除操作同步到本地库 &lt;code&gt;git commit -m &#39;删除test2.txt文件&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找回本地库中删除的文件，实际上就是切换到历史版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;找回 &lt;strong&gt;暂存区删除&lt;/strong&gt; 的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恢复暂存区的数据：&lt;code&gt;git reset --hard &amp;lt;HEAD_hash&amp;gt;&lt;/code&gt;    /  &lt;code&gt;git reset --hard HEAD&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;diff-命令&#34;&gt;diff 命令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;比较工作区和暂存区文件&lt;/strong&gt;
更改工作区 test.txt 文件后，比较工作区和暂存区 test.txt 文件：&lt;code&gt;git diff test.txt&lt;/code&gt;
比较工作区和暂存区所有文件差异：&lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比较暂存区和本地库文件&lt;/strong&gt;
通过 &lt;strong&gt;HEAD 指针&lt;/strong&gt; 比较：&lt;code&gt;git diff HEAD test.txt&lt;/code&gt;&lt;br&gt;
通过 &lt;strong&gt;hash 索引&lt;/strong&gt; 比较：&lt;code&gt;git diff &amp;lt;hash&amp;gt; test.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分支&#34;&gt;分支
&lt;/h2&gt;&lt;p&gt;在版本控制中，使用多条线同时推进多个任务，这里面的多条线就是多个分支。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5cUsers%5cShinelon%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20210417105237295.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20210417105237295&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;同时多个分支可以并行开发，互不影响，提高开发效率&lt;/p&gt;
&lt;p&gt;如果有一个分支功能开发失败，可以直接删除该分支&lt;/p&gt;
&lt;h3 id=&#34;操作分支&#34;&gt;操作分支
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看分支：&lt;code&gt;git branch -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建分支：&lt;code&gt;git branch &amp;lt;branchname&amp;gt;&lt;/code&gt; (当前所在分支由*表示)&lt;/li&gt;
&lt;li&gt;切换分支：&lt;code&gt;git checkout &amp;lt;branchname&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将 branch01 分支 &lt;strong&gt;合并到主分支&lt;/strong&gt; 中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换到主分支中 &lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge branch01**&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在同一个文件的同一个位置修改时，会 &lt;font color=blue&gt; 出现冲突 &lt;/font&gt; 问题 &lt;font color=red&gt;（mater|MERGING)&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决：认为决定，留下需要的部分&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;
&lt;code&gt;git commit -m &amp;quot;解决了冲突问题&amp;quot;&lt;/code&gt;  (&lt;strong&gt;不能带文件名&lt;/strong&gt;)&lt;/p&gt;
&lt;h2 id=&#34;远程库&#34;&gt;远程库
&lt;/h2&gt;&lt;h3 id=&#34;克隆远程库&#34;&gt;&lt;strong&gt;克隆远程库&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git clone &amp;lt;远程库地址&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;克隆作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化本地仓库&lt;/li&gt;
&lt;li&gt;将远程库内容完整克隆到本地&lt;/li&gt;
&lt;li&gt;替我们创建远程库别名(&lt;code&gt;origin&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看远程库&#34;&gt;查看远程库
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;：显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote -v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bakkdoor  https://github.com/bakkdoor/grit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bakkdoor  https://github.com/bakkdoor/grit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cho45     https://github.com/cho45/grit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cho45     https://github.com/cho45/grit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;defunkt   https://github.com/defunkt/grit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;defunkt   https://github.com/defunkt/grit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;koke      git://github.com/koke/grit.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;koke      git://github.com/koke/grit.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin    git@github.com:mojombo/grit.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin    git@github.com:mojombo/grit.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;添加远程仓库&#34;&gt;添加远程仓库
&lt;/h3&gt;&lt;p&gt;运行 &lt;code&gt;git remote add &amp;lt;shortname&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt; 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote add pb https://github.com/paulboone/ticgit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote -v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin	https://github.com/schacon/ticgit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin	https://github.com/schacon/ticgit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pb	https://github.com/paulboone/ticgit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pb	https://github.com/paulboone/ticgit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在你可以在命令行中使用字符串 &lt;code&gt;pb&lt;/code&gt; 来代替整个 URL。 例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 &lt;code&gt;git fetch pb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;如果你使用 &lt;code&gt;clone&lt;/code&gt; 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，&lt;code&gt;git fetch origin&lt;/code&gt; 会抓取克隆（或上一次抓取）后新推送的所有工作&lt;/p&gt;
&lt;h4 id=&#34;查看远程仓库&#34;&gt;查看远程仓库
&lt;/h4&gt;&lt;p&gt;如果想要查看某一个远程仓库的更多信息，可以使用 &lt;code&gt;git remote show &amp;lt;remote&amp;gt;&lt;/code&gt; 命令。 如果想以一个特定的缩写名运行这个命令，例如 &lt;code&gt;origin&lt;/code&gt;，会得到像下面类似的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote show origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* remote origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Fetch URL: https://github.com/schacon/ticgit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Push  URL: https://github.com/schacon/ticgit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  HEAD branch: master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Remote branches:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    master                               tracked
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dev-branch                           tracked
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Local branch configured &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;git pull&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    master merges with remote master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Local ref configured &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;git push&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    master pushes to master &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;up to date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;远程仓库的重命名与移除&#34;&gt;远程仓库的重命名与移除
&lt;/h4&gt;&lt;p&gt;如果想要查看某一个远程仓库的更多信息，可以使用 &lt;code&gt;git remote show &amp;lt;remote&amp;gt;&lt;/code&gt; 命令。 如果想以一个特定的缩写名运行这个命令，例如 &lt;code&gt;origin&lt;/code&gt;，会得到像下面类似的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote show origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* remote origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Fetch URL: https://github.com/schacon/ticgit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Push  URL: https://github.com/schacon/ticgit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  HEAD branch: master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Remote branches:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    master                               tracked
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    dev-branch                           tracked
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Local branch configured &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;git pull&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    master merges with remote master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Local ref configured &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;git push&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    master pushes to master &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;up to date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;远程库修改的拉取操作&#34;&gt;远程库修改的拉取操作
&lt;/h3&gt;&lt;h4 id=&#34;fetchmerge-操作&#34;&gt;fetch+merge 操作
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;抓取操作：fetch
&lt;code&gt;git fetch &amp;lt;别名&amp;gt; &amp;lt;分支&amp;gt;&lt;/code&gt;  只是将远程库内容下载到本地，工作区并没有更新
可以先检查远程库的文件 &lt;code&gt;git checkout origin master&lt;/code&gt;，查看内容是否正确&lt;/li&gt;
&lt;li&gt;合并操作：merge
&lt;ul&gt;
&lt;li&gt;切换到当前工作区主分支 &lt;code&gt;git merge chekout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;合并：&lt;code&gt;git merge origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pull-操作&#34;&gt;pull 操作
&lt;/h4&gt;&lt;p&gt;可以直接利用 pull 命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git pull origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fetch+pull&lt;/code&gt; 更保险一点&lt;/p&gt;
&lt;h3 id=&#34;推送分支&#34;&gt;&lt;strong&gt;推送分支&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;。 当你想要将 &lt;code&gt;master&lt;/code&gt; 分支推送到 &lt;code&gt;origin&lt;/code&gt; 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字）， 那么运行这个命令就可以将你所做的备份到服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push origin master  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;目前github主分支改用main&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;省略&#34;&gt;省略
&lt;/h2&gt;&lt;p&gt;29-31  团队合作部分&lt;/p&gt;
&lt;h2 id=&#34;ssh-免密登录&#34;&gt;SSH 免密登录
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;进入都用户主目录中 &lt;code&gt;cd ~&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行命令 &lt;code&gt;ssh-keygen -t rsa -C &amp;lt;your github email&amp;gt;&lt;/code&gt; 生成.ssh 文件夹 （三次回车确认默认值）&lt;/li&gt;
&lt;li&gt;打开./ssh/id_rsa.pub 文件，复制密钥&lt;/li&gt;
&lt;li&gt;密钥添加到 github 的 setting 中&lt;/li&gt;
&lt;li&gt;生成密钥后，就可以正常进行 push 操作了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在工作区进行如下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;# guocfu.github.io&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin git@github.com:guocfu/guocfu.github.io.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
