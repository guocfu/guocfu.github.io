[{"content":"","date":"2025-05-17T21:46:57+08:00","permalink":"http://localhost:10257/p/%E5%BF%AB%E6%8D%B7%E9%94%AE/","title":"快捷键"},{"content":"Scanner 类是 java.util 包的一部分，用于获取基本类型的输入例如 double、int 和 string。\nScanner中的next()方法 Scanner中的next()方法主要用于获取字符串的输入,它会自动消去有效字符前的空白符（如：空格、Tab键或者换行符），在获取有效字符之后，next()方法会将其后输入的空白符作为结束符，该空白符仍保留在缓冲区中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package com.atguigu.a_scanner; import java.util.Scanner; public class Demo01Scanner { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String str1 = sc.next(); System.out.println(\u0026#34;str1 = \u0026#34; + str1); String str2 = sc.next(); System.out.println(\u0026#34;str2 = \u0026#34; + str2); String str3 = sc.next(); System.out.println(\u0026#34;str3 = \u0026#34; + str3); } } 运行结果如图:\n第一个单词Hello前输入了四个空格，一个Tab符和一个换行符，都被next()忽略了，Hello后面的换行符被next()视为结束符,第一次读取结束，并且换行符仍遗留在缓冲区中。\nnext()第二次读取时, 忽略缓冲区中遗留的换行符并读取第二个Hello，之后的空白符被视为结束符，第二次读取结束。\nnext()第三次读取时，忽略World前面的空白符并读取World。\nScanner中的nextLine方法 nextLine()方法会自动读取换行符之前的所有字符（并舍弃换行符），因此可以得到带空格或者Tab键的字符串，但是nextLine不会忽略有效字符之前的空白符，也就是说加入输入\\nHello，nextLine会把\\n视为结束符并结束读取。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.atguigu.a_scanner; import java.util.Scanner; public class Demo01Scanner { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String str1 = sc.nextLine(); System.out.println(\u0026#34;str1 = \u0026#34; + str1); String str2 = sc.nextLine(); System.out.println(\u0026#34;str2 = \u0026#34; + str2); System.out.println(\u0026#34;程序结束\u0026#34;); } } 运行结果如图：\nHello World之前有四个空格和一个Tab符都被nextLine读取了，而第二次输入时直接输入Enter，因此nextLine未读取到任何字符。\nnext()和nextLine()使用 next()和nextLine()由于读取特性的不同，因此在混用时容易出现错误，如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package com.atguigu.a_scanner; import java.util.Scanner; public class Demo01Scanner { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String str1 = sc.next(); System.out.println(\u0026#34;str1 = \u0026#34; + str1); String str2 = sc.nextLine(); System.out.println(\u0026#34;str2 = \u0026#34; + str2); System.out.println(\u0026#34;str2.len = \u0026#34; + str2.length()); System.out.println(\u0026#34;程序结束\u0026#34;); } } 运行结果如图：\n由于next()读取Hello后换行符仍保留在缓冲区，因此nextLine()检测到换行符会直接结束读取，str2的值为空白。\n如果想要正确读取str2，可以在next()后面再加一个nextLine()过滤换行符：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package com.atguigu.a_scanner; import java.util.Scanner; public class Demo01Scanner { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String str1 = sc.next(); sc.nextLine(); System.out.println(\u0026#34;str1 = \u0026#34; + str1); String str2 = sc.nextLine(); System.out.println(\u0026#34;str2 = \u0026#34; + str2); System.out.println(\u0026#34;str2.len = \u0026#34; + str2.length()); System.out.println(\u0026#34;程序结束\u0026#34;); } } nextDouble() 、nextFloat()、nextInt() 等方法特性与next()方法一致\n","date":"2025-05-10T00:00:00Z","image":"http://localhost:10257/p/java-scanner%E7%B1%BB%E4%B8%AD.next%E5%92%8C.nextline%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/images/demo2_hu_5c4d17145a71fcf4.jpg","permalink":"http://localhost:10257/p/java-scanner%E7%B1%BB%E4%B8%AD.next%E5%92%8C.nextline%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/","title":"Java Scanner类中.next()和.nextLine()方法的区别"},{"content":"【2021年Git全集教程】大牛4小时带你精通Git玩转GitHub（最新版）_哔哩哔哩_bilibili\nGit 远程仓库(Github) | 菜鸟教程\nCtrl+Alt+G 打开 git bash\n初始化本地仓库 本地创建一个文件夹 GitResp 保存仓库（非必须） Git Bash Here (Ctrl + 滑轮 调整字体大小 / Options 设置) git 命令与 linux 相同\n1 2 git --version clear # 清屏 设置签名： 设置用户名和邮箱：\n1 2 git config --global user.name \u0026#34;***\u0026#34; git config --global use.email \u0026#34;***\u0026#34; 本次仓库初始化 git init 生成 .git 隐藏文件夹\n.git 文件夹下文件不要轻易修改\n常用命令 在工作区创建一个文件 将文件提交到暂存区 git add \u0026lt;filename\u0026gt; 将暂存区提交到本地库 git commit -m \u0026quot;comment\u0026quot; \u0026lt;filename\u0026gt; git status 查看缓存区状态 （修改本地文件需要用 add, commit 命令更新本地库） 注意事项：\n不放在工作区的文件，git 不进行管理 即使放在工作区的文件，必须通过 add，commit 命令操作将内容提交到本地库 git 才能管理 fg 命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Ctrl+Z挂起作业 # jobs查看挂起的作业 # fg 将后台的作业切换到前台 $ jobs [1]+ Stopped vim Git学习笔记.md $ fg 1 vim Git学习笔记.md [1]+ Stopped vim Git学习笔记.md Shinelon@DESKTOP-69E8U3H MINGW64 /e/坚果云/Notes/Git $ fg vim Git学习笔记.md log 命令 方法 1：git log 日志 (q 退出) 太多时分页(b 上一页)\n方法 2：git log --pretty=oneline\n方法 3： git log --online (更简洁)\n方法 4：git reflog 多了信息：HEAD@{number} \u0026ndash; 指针回到这个历史版本需要多少步\nreset 命令 前进或后退历史版本\ngit reset --hard \u0026lt;hash\u0026gt; (hash 在 HEAD@前)\n本地库指针移动的同时，重置暂存区和工作区\ngit reset --mixed \u0026lt;hash\u0026gt; 本地库指针移动的同时，重置暂存区，工作区不变\ngit reset --soft \u0026lt;hash\u0026gt; 本地库指针移动的，暂存区和工作区都不动\n常用 hard 参数\n删除文件 删除工作区中的 test2.txt rm test2.txt，或者选中文件手动删除 将删除操作同步到暂存区 git rm test2.txt 将删除操作同步到本地库 git commit -m '删除test2.txt文件' 找回本地库中删除的文件，实际上就是切换到历史版本 找回 暂存区删除 的文件：\n1 2 git rm test2.txt git add test2.txt 恢复暂存区的数据：git reset --hard \u0026lt;HEAD_hash\u0026gt; / git reset --hard HEAD\ndiff 命令 比较工作区和暂存区文件 更改工作区 test.txt 文件后，比较工作区和暂存区 test.txt 文件：git diff test.txt 比较工作区和暂存区所有文件差异：git diff 比较暂存区和本地库文件 通过 HEAD 指针 比较：git diff HEAD test.txt\n通过 hash 索引 比较：git diff \u0026lt;hash\u0026gt; test.txt 分支 在版本控制中，使用多条线同时推进多个任务，这里面的多条线就是多个分支。\n同时多个分支可以并行开发，互不影响，提高开发效率\n如果有一个分支功能开发失败，可以直接删除该分支\n操作分支 查看分支：git branch -v 创建分支：git branch \u0026lt;branchname\u0026gt; (当前所在分支由*表示) 切换分支：git checkout \u0026lt;branchname\u0026gt; 将 branch01 分支 合并到主分支 中：\n切换到主分支中 git checkout master git merge branch01** 在同一个文件的同一个位置修改时，会 出现冲突 问题 （mater|MERGING)\n解决：认为决定，留下需要的部分\ngit add \u0026lt;filename\u0026gt; git commit -m \u0026quot;解决了冲突问题\u0026quot; (不能带文件名)\n远程库 克隆远程库 git clone \u0026lt;远程库地址\u0026gt;\n克隆作用：\n初始化本地仓库 将远程库内容完整克隆到本地 替我们创建远程库别名(origin) 查看远程库 git remote -v：显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL\n1 2 3 4 5 6 7 8 9 10 11 $ git remote -v bakkdoor https://github.com/bakkdoor/grit (fetch) bakkdoor https://github.com/bakkdoor/grit (push) cho45 https://github.com/cho45/grit (fetch) cho45 https://github.com/cho45/grit (push) defunkt https://github.com/defunkt/grit (fetch) defunkt https://github.com/defunkt/grit (push) koke git://github.com/koke/grit.git (fetch) koke git://github.com/koke/grit.git (push) origin git@github.com:mojombo/grit.git (fetch) origin git@github.com:mojombo/grit.git (push) 添加远程仓库 运行 git remote add \u0026lt;shortname\u0026gt; \u0026lt;url\u0026gt; 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：\n1 2 3 4 5 6 7 8 $ git remote origin $ git remote add pb https://github.com/paulboone/ticgit $ git remote -v origin\thttps://github.com/schacon/ticgit (fetch) origin\thttps://github.com/schacon/ticgit (push) pb\thttps://github.com/paulboone/ticgit (fetch) pb\thttps://github.com/paulboone/ticgit (push) 现在你可以在命令行中使用字符串 pb 来代替整个 URL。 例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 git fetch pb.\n如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作\n查看远程仓库 如果想要查看某一个远程仓库的更多信息，可以使用 git remote show \u0026lt;remote\u0026gt; 命令。 如果想以一个特定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息：\n1 2 3 4 5 6 7 8 9 10 11 12 $ git remote show origin * remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for \u0026#39;git pull\u0026#39;: master merges with remote master Local ref configured for \u0026#39;git push\u0026#39;: master pushes to master (up to date) 远程仓库的重命名与移除 如果想要查看某一个远程仓库的更多信息，可以使用 git remote show \u0026lt;remote\u0026gt; 命令。 如果想以一个特定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息：\n1 2 3 4 5 6 7 8 9 10 11 12 $ git remote show origin * remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for \u0026#39;git pull\u0026#39;: master merges with remote master Local ref configured for \u0026#39;git push\u0026#39;: master pushes to master (up to date) 远程库修改的拉取操作 fetch+merge 操作 抓取操作：fetch git fetch \u0026lt;别名\u0026gt; \u0026lt;分支\u0026gt; 只是将远程库内容下载到本地，工作区并没有更新 可以先检查远程库的文件 git checkout origin master，查看内容是否正确 合并操作：merge 切换到当前工作区主分支 git merge chekout master 合并：git merge origin master pull 操作 可以直接利用 pull 命令：\ngit pull origin master\nfetch+pull 更保险一点\n推送分支 git push \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt;。 当你想要将 master 分支推送到 origin 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字）， 那么运行这个命令就可以将你所做的备份到服务器：\n1 $ git push origin master (目前github主分支改用main) 省略 29-31 团队合作部分\nSSH 免密登录 进入都用户主目录中 cd ~ 执行命令 ssh-keygen -t rsa -C \u0026lt;your github email\u0026gt; 生成.ssh 文件夹 （三次回车确认默认值） 打开./ssh/id_rsa.pub 文件，复制密钥 密钥添加到 github 的 setting 中 生成密钥后，就可以正常进行 push 操作了 在工作区进行如下操作：\n1 2 3 4 5 6 7 echo \u0026#34;# guocfu.github.io\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:guocfu/guocfu.github.io.git git push -u origin main ","date":"2025-05-08T18:18:59+08:00","image":"http://localhost:10257/p/git-%E5%85%A5%E9%97%A8/images/test_hu_b3ee0e214c0341d6.jpg","permalink":"http://localhost:10257/p/git-%E5%85%A5%E9%97%A8/","title":"Git 入门"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"http://localhost:10257/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"http://localhost:10257/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"http://localhost:10257/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"http://localhost:10257/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"http://localhost:10257/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"http://localhost:10257/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:10257/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"http://localhost:10257/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"http://localhost:10257/p/emoji-support/","title":"Emoji Support"}]